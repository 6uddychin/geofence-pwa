{"ast":null,"code":"import React,{useState}from'react';import PhotoCapture from'./PhotoCapture';import Map from'./Map';import'./App.css';import amznLogo from'./assets/amzn_logo.png';// Ensure this path is correct\nimport sendEmail from'./EmailService';// Import the email service\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const[coordinates,setCoordinates]=useState([]);const[isConfirmed,setIsConfirmed]=useState(false);const[photos,setPhotos]=useState([]);const handleCapture=capturedPhotos=>{if(capturedPhotos.length===4){setCoordinates(capturedPhotos.map(photo=>({...photo,latitude:photo.latitude,longitude:photo.longitude})));setPhotos(capturedPhotos);setIsConfirmed(false);}};const handleConfirm=async mapImage=>{setIsConfirmed(true);sendEmail(photos,coordinates,mapImage);// Handle confirmed bounding box, e.g., save to server\n};const handleStartOver=()=>{setCoordinates([]);setPhotos([]);setIsConfirmed(false);};const handleRetake=index=>{setIsConfirmed(false);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"img\",{src:amznLogo,alt:\"Amazon Logo\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Photo Geo Logger\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"instructions\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"You will need to take 4 images from each corner of the desired geofence\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"To take a photo, simply press the blue camera icon\"}),/*#__PURE__*/_jsx(\"li\",{children:\"To retake a photo, simply press the green camera icon\"})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"divider\"})]}),!isConfirmed&&/*#__PURE__*/_jsx(PhotoCapture,{onCapture:handleCapture}),coordinates.length===4&&!isConfirmed&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"map-container\",children:/*#__PURE__*/_jsx(Map,{coordinates:coordinates,onConfirm:handleConfirm,onStartOver:handleStartOver,onRetake:handleRetake})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleConfirm(),disabled:coordinates.length!==4,children:\"Submit\"})]})]});};export default App;","map":{"version":3,"names":["React","useState","PhotoCapture","Map","amznLogo","sendEmail","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","coordinates","setCoordinates","isConfirmed","setIsConfirmed","photos","setPhotos","handleCapture","capturedPhotos","length","map","photo","latitude","longitude","handleConfirm","mapImage","handleStartOver","handleRetake","index","children","src","alt","className","onCapture","onConfirm","onStartOver","onRetake","onClick","disabled"],"sources":["/Users/buddychin/Desktop/geofence-photo/photo-geo-pwa/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PhotoCapture from './PhotoCapture';\nimport Map from './Map';\nimport './App.css';\nimport amznLogo from './assets/amzn_logo.png'; // Ensure this path is correct\nimport sendEmail from './EmailService'; // Import the email service\n\nconst App = () => {\n  const [coordinates, setCoordinates] = useState([]);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [photos, setPhotos] = useState([]);\n\n  const handleCapture = (capturedPhotos) => {\n    if (capturedPhotos.length === 4) {\n      setCoordinates(capturedPhotos.map(photo => ({ ...photo, latitude: photo.latitude, longitude: photo.longitude })));\n      setPhotos(capturedPhotos);\n      setIsConfirmed(false);\n    }\n  };\n\n  const handleConfirm = async (mapImage) => {\n    setIsConfirmed(true);\n    sendEmail(photos, coordinates, mapImage);\n    // Handle confirmed bounding box, e.g., save to server\n  };\n\n  const handleStartOver = () => {\n    setCoordinates([]);\n    setPhotos([]);\n    setIsConfirmed(false);\n  };\n\n  const handleRetake = (index) => {\n    setIsConfirmed(false);\n  };\n\n  return (\n    <div>\n      <header>\n        <img src={amznLogo} alt=\"Amazon Logo\" />\n        <h1>Photo Geo Logger</h1>\n      </header>\n      <div className='instructions'>\n        <p>You will need to take 4 images from each corner of the desired geofence</p>\n        <ul>\n          <li>To take a photo, simply press the blue camera icon</li>\n          <li>To retake a photo, simply press the green camera icon</li>\n        </ul>\n        <hr className='divider' />\n      </div>\n      {!isConfirmed && <PhotoCapture onCapture={handleCapture} />}\n      {coordinates.length === 4 && !isConfirmed && (\n        <>\n          {/* <div className=\"photo-gallery\">\n            {coordinates.map((coord, index) => (\n              // <div key={index} style={{ margin: '0 10px', textAlign: 'center' }}>\n              //   <h4>Photo {index + 1} (of 4)</h4>\n              //   <img src={coord.imageUrl} alt={`Photo ${index + 1}`} style={{ width: '100px', height: '100px', objectFit: 'cover' }} />\n              // </div>\n            ))}\n          </div> */}\n          <div className=\"map-container\">\n            <Map\n              coordinates={coordinates}\n              onConfirm={handleConfirm}\n              onStartOver={handleStartOver}\n              onRetake={handleRetake}\n            />\n          </div>\n          <button onClick={() => handleConfirm()} disabled={coordinates.length !== 4}>Submit</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,GAAG,KAAM,OAAO,CACvB,MAAO,WAAW,CAClB,MAAO,CAAAC,QAAQ,KAAM,wBAAwB,CAAE;AAC/C,MAAO,CAAAC,SAAS,KAAM,gBAAgB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAExC,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACc,WAAW,CAAEC,cAAc,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACgB,MAAM,CAAEC,SAAS,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAExC,KAAM,CAAAkB,aAAa,CAAIC,cAAc,EAAK,CACxC,GAAIA,cAAc,CAACC,MAAM,GAAK,CAAC,CAAE,CAC/BP,cAAc,CAACM,cAAc,CAACE,GAAG,CAACC,KAAK,GAAK,CAAE,GAAGA,KAAK,CAAEC,QAAQ,CAAED,KAAK,CAACC,QAAQ,CAAEC,SAAS,CAAEF,KAAK,CAACE,SAAU,CAAC,CAAC,CAAC,CAAC,CACjHP,SAAS,CAACE,cAAc,CAAC,CACzBJ,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAED,KAAM,CAAAU,aAAa,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACxCX,cAAc,CAAC,IAAI,CAAC,CACpBX,SAAS,CAACY,MAAM,CAAEJ,WAAW,CAAEc,QAAQ,CAAC,CACxC;AACF,CAAC,CAED,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5Bd,cAAc,CAAC,EAAE,CAAC,CAClBI,SAAS,CAAC,EAAE,CAAC,CACbF,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAED,KAAM,CAAAa,YAAY,CAAIC,KAAK,EAAK,CAC9Bd,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAED,mBACEP,KAAA,QAAAsB,QAAA,eACEtB,KAAA,WAAAsB,QAAA,eACExB,IAAA,QAAKyB,GAAG,CAAE5B,QAAS,CAAC6B,GAAG,CAAC,aAAa,CAAE,CAAC,cACxC1B,IAAA,OAAAwB,QAAA,CAAI,kBAAgB,CAAI,CAAC,EACnB,CAAC,cACTtB,KAAA,QAAKyB,SAAS,CAAC,cAAc,CAAAH,QAAA,eAC3BxB,IAAA,MAAAwB,QAAA,CAAG,yEAAuE,CAAG,CAAC,cAC9EtB,KAAA,OAAAsB,QAAA,eACExB,IAAA,OAAAwB,QAAA,CAAI,oDAAkD,CAAI,CAAC,cAC3DxB,IAAA,OAAAwB,QAAA,CAAI,uDAAqD,CAAI,CAAC,EAC5D,CAAC,cACLxB,IAAA,OAAI2B,SAAS,CAAC,SAAS,CAAE,CAAC,EACvB,CAAC,CACL,CAACnB,WAAW,eAAIR,IAAA,CAACL,YAAY,EAACiC,SAAS,CAAEhB,aAAc,CAAE,CAAC,CAC1DN,WAAW,CAACQ,MAAM,GAAK,CAAC,EAAI,CAACN,WAAW,eACvCN,KAAA,CAAAE,SAAA,EAAAoB,QAAA,eASExB,IAAA,QAAK2B,SAAS,CAAC,eAAe,CAAAH,QAAA,cAC5BxB,IAAA,CAACJ,GAAG,EACFU,WAAW,CAAEA,WAAY,CACzBuB,SAAS,CAAEV,aAAc,CACzBW,WAAW,CAAET,eAAgB,CAC7BU,QAAQ,CAAET,YAAa,CACxB,CAAC,CACC,CAAC,cACNtB,IAAA,WAAQgC,OAAO,CAAEA,CAAA,GAAMb,aAAa,CAAC,CAAE,CAACc,QAAQ,CAAE3B,WAAW,CAACQ,MAAM,GAAK,CAAE,CAAAU,QAAA,CAAC,QAAM,CAAQ,CAAC,EAC3F,CACH,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}